[{"body":"\n1. IssueIOU initiator flow  Create a flow  flow name: IssueIOUInitiator add a trigger : select \u0026ldquo;Dovetail CorDApp Flow Initiator\u0026rdquo; from the list  select false for \u0026ldquo;Use confidential identities for this transaction?\u0026rdquo; select false for \u0026ldquo;Send transactions to observers?\u0026rdquo; click \u0026ldquo;Next\u0026rdquo; button add following flow input parameters  holder : Type = Party, PartyRole = Participant amt: Type = Amount extId: Type = String   click \u0026ldquo;Continue\u0026rdquo; button select \u0026ldquo;Copy Schema\u0026rdquo; select the trigger, and map flow input   implement IssueIOUInitiator flow  select BuildTransactoinProposal activity from Dovetail-CorDApp category select \u0026ldquo;IOUContract:\u0026rdquo; from contract dropdown select com.example.iou.IssueIOU from transaction dropdown map the activity input  use cordapp.createLinearIdFromExternalId($flow.transactionInput.extId) to map iou.linearId    You will see an error at design time for this function, ignore the error for now, it is supported at runtime         2. TransferIOU receiver flow  Create a flow  flow name: TransferIOUResponder select trigger : Dovetail CorDApp Flow Receiver  select receiver from flow type dropdown select false for \u0026ldquo;Use confidential identities for this transaction?\u0026rdquo; initiator flow name: com.alice.iou.flows.TransferIOUInitiator click \u0026ldquo;Continue\u0026rdquo; button select \u0026ldquo;Copy Schema\u0026rdquo; select the trigger, and map flow input      3. SettleIOU initiator flow  Create a flow  flow name: SettleIOUInitiator select trigger : Dovetail CorDApp Flow Initiator  select false for \u0026ldquo;Use confidential identities for this transaction?\u0026rdquo; select false for \u0026ldquo;Send transactions to observers?\u0026rdquo; click \u0026ldquo;Next\u0026rdquo; button add following flow input parameters  iouId : Type = LinearId   click \u0026ldquo;Continue\u0026rdquo; button select \u0026ldquo;Copy Schema\u0026rdquo; select the trigger, and map flow input   Implement SettleIOUInitiator flow  add SimpleVaultQuery activity from Dovetail-CorDApp category  Configuration screen  select IOU from asset dropdow Map input     if IOU is found * add CashWallet activity from Dovetail-CorDApp category * Select \u0026ldquo;Retrieve Funds\u0026rdquo; from dropdown * Map input * add BuildTransactoinProposal Dovetail-CorDApp category * select IOU from contract dropdown * select com.example.iou.SettleIOU from transaction dropdown * map the activity input otherwise throw error      4. Export the \u0026ldquo;charlie\u0026rdquo; applicatio export the application to artifiacts/charlie.json\n","excerpt":"1. IssueIOU initiator flow  Create a flow  flow name: IssueIOUInitiator add a trigger : select …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-dist/charlie/","title":"CorDapp for charlie"},{"body":"Let’s start your Dovetail journey! There’s a lot to learn, but every journey starts somewhere. In this chapter, we’ll discuss:\n Installing Dovetail Studio on Linux, macOS, and Windows Installing Dovetail CLI Development environment dependencies  ","excerpt":"Let’s start your Dovetail journey! There’s a lot to learn, but every journey starts somewhere. In …","ref":"https://tibcosoftware.github.io/dovetail/docs/getting-started/","title":"Getting Started"},{"body":"Installing the Project Dovetail Studio just follow these steps:\n1.- Download the latest version for your os architecture and your blockchain target.\n You can find the latest release here\n Or you can just execute this commands\n For Hyperledger fabric development:\n mkdir dovetail_installation\rcd dovetail_installation\rcurl -OL https://github.com/TIBCOSoftware/dovetail/releases/download/v0.2.0/TIB_dovetail-fabric_0.2.0_macosx_x86_64.zip\r For R3 Corda development:\n mkdir dovetail_installation\rcd dovetail_installation\rcurl -OL https://github.com/TIBCOSoftware/dovetail/releases/download/v0.2.0/TIB_dovetail-corda_0.2.0_macosx_x86_64.zip\r For Multitarget development:\n mkdir dovetail_installation\rcd dovetail_installation\rcurl -OL https://github.com/TIBCOSoftware/dovetail/releases/download/v0.2.0/TIB_dovetail-multitarget_0.2.0_macosx_x86_64.zip\r2.- Unzip the downloaded release (for example on mac) (from dovetail_installation folder).\nunzip TIB_dovetail-fabric_0.2.0_macosx_x86_64.zip\rStarting Dovetail Studio To get started with your downloaded version of the Dovetail Studio in the previous step just do the following:\n1.- Run studio\ndovetail/0.2/bin/run-studio.sh eula-accept\rLaunching Dovetail Studio To launch Dovetail Studio simply open your favorite web browser, and navigate to http://localhost:8090. You'll see the initial page to create your first smart contract!\nInstallation Tutorial Video ","excerpt":"Installing the Project Dovetail Studio just follow these steps:\n1.- Download the latest version for …","ref":"https://tibcosoftware.github.io/dovetail/docs/getting-started/installation/","title":"Installation"},{"body":"\n Start up and open Dovetail Studio WebUI Go to Connection tab Click \u0026ldquo;Add Connection\u0026rdquo;  Choose \u0026ldquo;Define Ledger Asset Schema\u0026rdquo; from the list Enter display name, e.g. \u0026ldquo;my first IOU\u0026rdquo; Enter asset name \u0026ldquo;IOU\u0026rdquo; Enter module name \u0026ldquo;com.example.iou\u0026rdquo; Select asset type \u0026ldquo;Linear State\u0026rdquo;  LinearId attribute will be automatically added to the pre-defined fields   Enter addition fields  issuer, select \u0026ldquo;Party\u0026rdquo; from the type dropdown menu holder, select \u0026ldquo;Party\u0026rdquo; from the type dropdown menu amt, select \u0026ldquo;Amount\u0026rdquo; from the type dropdown menu   Define party roles  add \u0026ldquo;issuer\u0026rdquo;, leave other fields as default add \u0026ldquo;holder\u0026rdquo;, leave other fields as default   Click \u0026ldquo;Donee\u0026rdquo; button    ","excerpt":"\n Start up and open Dovetail Studio WebUI Go to Connection tab Click \u0026ldquo;Add Connection\u0026rdquo; …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/smart-contract/model/","title":"IOU Smart Contract Data Model"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/smart-contract/","title":"IOU Smart Contract"},{"body":"1 Run code nodes from your cli folder, run following commands, check logs under network/corda/nodes/*/log to verify that each node has been started\n  ./network_clean.sh to clean up logs and vault database ./network_start.sh to start up nodes   to stop all nodes, run following command\n  ./network_stop.sh to shutdown all nodes   2 Start up web clients from your cli folder, run following command to start up all web servers, check cli/log to verify web servers are started.\n  ./start_webservers.sh   from your cli folder, run following command to stop all web servers\n  ./stop_webservers.sh   3 Open swagger UI  alice: http://localhost:9000/swagger-ui.html charlie : http://localhost:9001/swagger-ui.html bob: http://localhost:9002/swagger-ui.html bank: http://localhost:9004/swagger-ui.html  ","excerpt":"1 Run code nodes from your cli folder, run following commands, check logs under …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-test/start-nodes/","title":"Start up nodes"},{"body":"1 Parties and Roles for the network For this tutorial, the story line is party \u0026ldquo;charlie\u0026rdquo; issues an IOU to party \u0026ldquo;alice\u0026rdquo;, party \u0026ldquo;alice\u0026rdquo; then transfers the IOU to party \u0026ldquo;bob\u0026rdquo;, finally party \u0026ldquo;charlie\u0026rdquo; settles the IOU with party \u0026ldquo;bob\u0026rdquo;. party \u0026ldquo;bank\u0026rdquo; is the cash issuer.\nBelow the are the dapp flows each party should implement:\n charlie is the IOU issuer  Implement IssueIOU initiating flow Implememt TransferIOU receiving flow Implement SettleIOU initiating flow   alice is the original IOU holder, and will transfer the IOU to bob  Implement IssueIOU receiving flow Implement TransferIOU initiating flow   bob is the new IOU holder  Implement TransferIOU receiving flow Implement SettleIOU receiving flow   bank is the cash issuer  Will use Corda CashIssueAndPayment flow to issue cash to charlie    2. Import Smart Contract Before we start implementing the flows, Dovetail needs to know the smart contract transactions and the input parameters of each transaction.\n Go to Connection tab  Add Connection Select \u0026ldquo;Import Dovetail Contract\u0026rdquo; Enter name \u0026ldquo;IOUContract\u0026rdquo; Browse and select artifacts/iou.json file Click \u0026ldquo;Done\u0026rdquo;    ","excerpt":"1 Parties and Roles for the network For this tutorial, the story line is party \u0026ldquo;charlie\u0026rdquo; …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-dist/","title":"Corda Distributed Application"},{"body":"Introduction The dovetail cli is a tool to mainly generate smart contracts for a given model built using ui tool Dovetail Studio, so we recommend you to learn how to do that first.\nBefore you get started Before you can get started with the cli tools you need to make sure you have the Go programming language and git installed. Go v1.13.x is required.\n Don't forget to set your GOPATH variable and make sure that $GOPATH/bin is part of your PATH (see here or here for more details)\n Installing the cli tools Copy and paste the following commands to install Project Dovetail™ commandline tool.\ncurl https://github.com/TIBCOSoftware/dovetail-cli/releases/download/v0.2.0/dovetail-cli-install.sh -sSfL v0.2.0 | sh\r The binary dovetail will be in your dovetail-cli/bin directory. You can add /path/to/dovetail-cli/bin/dovetail to your PATH env variable for easier access.\n Installation Tutorial Video \r","excerpt":"Introduction The dovetail cli is a tool to mainly generate smart contracts for a given model built …","ref":"https://tibcosoftware.github.io/dovetail/docs/getting-started/dovetail-cli/","title":"Dovetail CLI"},{"body":"\n1. IssueIOU receiver flow  Create a flow  Create a flow flow name: IssueIOUResponder select trigger : Dovetail CorDApp Flow Receiver  select receiver from flow type dropdown select false for \u0026ldquo;Use confidential identities for this transaction?\u0026rdquo; initiator flow name: com.charlie.iou.flows.IssueIOUInitiator click \u0026ldquo;Continue\u0026rdquo; button select \u0026ldquo;Copy Schema\u0026rdquo; select the trigger, and map flow input      2. TransferIOU initiator flow  flow name: TransferIOUInitiator  add a trigger : select \u0026ldquo;Dovetail CorDApp Flow Initiator\u0026rdquo; from the list  select false for \u0026ldquo;Use confidential identities for this transaction?\u0026rdquo; select false for \u0026ldquo;Send transactions to observers?\u0026rdquo; click \u0026ldquo;Next\u0026rdquo; button add following flow input parameters  iouId : Type = LinearId newHolder: Type = Party, PartyRole = Participant   click \u0026ldquo;Continue\u0026rdquo; button select \u0026ldquo;Copy Schema\u0026rdquo; select the trigger, and map flow input   implement TransferIOUInitiator flow  add SimpleVaultQuery activity from Dovetail-CorDApp category  Configuration screen  select IOU from asset dropdow Map input     if IOU is found  add BuildTransactoinProposal activity from Dovetail-CorDApp category  select \u0026ldquo;IOUContract:\u0026rdquo; from contract dropdown select com.example.iou.TransferIOU from transaction dropdown map the activity input     otherwise throw error      3. Export the \u0026ldquo;alice\u0026rdquo; applicatio export the application to artifiacts/alice.json\n","excerpt":"1. IssueIOU receiver flow  Create a flow  Create a flow flow name: IssueIOUResponder select trigger …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-dist/alice/","title":"CorDapp for alice"},{"body":"\n1 IssueIOU Transaction   Go to Apps Tab \u0026gt; Create to create a new Application \u0026ldquo;IOU\u0026rdquo;\n  Create a flow\n flow name \u0026ldquo;IssueIOU\u0026rdquo; \u0026gt; Add a trigger, select \u0026ldquo;SmartContract Action Trigger\u0026rdquo; from the list  Select \u0026ldquo;IOU\u0026rdquo; from the dropdown menu Click \u0026ldquo;Next\u0026rdquo; and \u0026ldquo;Next\u0026rdquo; to get to \u0026ldquo;Define Transaction Input\u0026rdquo; section, security and time window are not supported for Corda smart contract Add input fields  linearId, select \u0026ldquo;LinearId\u0026rdquo; from type dropdown menu issuer, select \u0026ldquo;Party\u0026rdquo; from type dropdown menu holder, select \u0026ldquo;Party\u0026rdquo; from type dropdown menu amt, select \u0026ldquo;Amount\u0026rdquo; from type dropdown menu click \u0026ldquo;Next\u0026rdquo;   Add output fields, leave this blank, click \u0026ldquo;Continue\u0026rdquo; Select \u0026ldquo;Copy Schema\u0026rdquo;   Select the trigger  Map to flow inputs   Now we will implement the flow  Add \u0026ldquo;Ledger Operation\u0026rdquo; activity from Dovetail-Ledger category Map input      2 TransferIOU Transaction  Create a new flow to implement TransferIOU transaction  Add a trigger, select \u0026ldquo;SmartContract Action Trigger\u0026rdquo; from the list  Select \u0026ldquo;IOU\u0026rdquo; from the dropdown menu Click \u0026ldquo;Next\u0026rdquo; and \u0026ldquo;Next\u0026rdquo; to get to \u0026ldquo;Define Transaction Input\u0026rdquo; section, security and time window are not supported for Corda smart contract Add input fields  iou, select \u0026ldquo;AssetRef\u0026rdquo; from Type dropdown menu, enter \u0026ldquo;com.example.iou.IOU\u0026rdquo; in the RecordType field, select \u0026ldquo;True\u0026rdquo; from Consuming dropdown menu newHolder, select \u0026ldquo;Party\u0026rdquo; from type dropdown menu click \u0026ldquo;Next\u0026rdquo;   Add output fields, leave this blank, click \u0026ldquo;Continue\u0026rdquo; Select \u0026ldquo;Copy Schema\u0026rdquo;   Select the trigger  Map to flow inputs   Now we will implement the flow  Add \u0026ldquo;Ledger Operation\u0026rdquo; activity from Dovetail-Ledger category Map input      3 SettleIOU Transaction  Create a new flow to implement SettleIOU transaction  Add a trigger, select \u0026ldquo;SmartContract Action Trigger\u0026rdquo; from the list * Select \u0026ldquo;IOU\u0026rdquo; from the dropdown menu * Click \u0026ldquo;Next\u0026rdquo; and \u0026ldquo;Next\u0026rdquo; to get to \u0026ldquo;Define Transaction Input\u0026rdquo; section, security and time window are not supported for Corda smart contract * Add input fields * iou, select \u0026ldquo;AssetRef\u0026rdquo; from Type dropdown menu, enter \u0026ldquo;com.example.iou.IOU\u0026rdquo; in the RecordType field, select \u0026ldquo;True\u0026rdquo; from Consuming dropdown menu * funds, select \u0026ldquo;AssetRef\u0026rdquo; from Type dropdown menu, select \u0026ldquo;True\u0026rdquo; from Consuming dropdown menu, select \u0026ldquo;True\u0026rdquo; from Repeating dropdown menu * click \u0026ldquo;Next\u0026rdquo; * Add output fields, leave this blank, click \u0026ldquo;Continue\u0026rdquo; * Select \u0026ldquo;Copy Schema\u0026rdquo;  Select the trigger  Map to flow inputs   Now we will implement the flow  Add \u0026ldquo;Payment Processor\u0026rdquo; activity from Dovetail-Ledger category Map input        ","excerpt":"1 IssueIOU Transaction   Go to Apps Tab \u0026gt; Create to create a new Application \u0026ldquo;IOU\u0026rdquo; …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/smart-contract/implement/","title":"Implement IOU Smart Contract"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/","title":"Labs"},{"body":"1 Issue cash Use bank's swagger UI to issue and transfer cash to charlie.\n  go to security-controller section\n login method  username = user1, password = test   execute    go to cash-controller section\n /cash/flow/issue-payment method  Authorizarion: copy the token value from login output, without the quotes Input: {\r\u0026#34;amount\u0026#34;: {\r\u0026#34;quantity\u0026#34;: 100000,\r\u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;\r},\r\u0026#34;issuerRef\u0026#34;: \u0026#34;00\u0026#34;,\r\u0026#34;recipient\u0026#34;: \u0026#34;O=charlie,L=New York,C=US\u0026#34;,\r\u0026#34;anonymous\u0026#34;: false,\r\u0026#34;notary\u0026#34;: \u0026#34;O=Notary,L=London,C=GB\u0026#34;\r}  execute, if successful, you should see output similar to following {\r\u0026#34;transactionId\u0026#34;: \u0026#34;FC85B7E74E8D9A4BDD39A2D83FA2C41C4CB57A296E43A3B5D9AF08FC7CF06E1B\u0026#34;\r}       2 Issue an IOU Use charlie's swagger UI to issue an IOU\n  go to security-controller section\n login method  username = user1, password = test   execute    go to query-controller section\n /query/states Authorizarion: copy the token value from login output, without the quotes execute, you should see cash is in the vault    go to main-controller section\n /api/issueiouinitiatort method  Authorizarion: copy the token value from login output, without the quotes Input:  {\r\u0026#34;holder\u0026#34;: \u0026#34;O=alice,L=New York,C=US\u0026#34;,\r\u0026#34;amt\u0026#34;: {\r\u0026#34;quantity\u0026#34;: 10000,\r\u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;\r},\r\u0026#34;extId\u0026#34;: \u0026#34;iou1\u0026#34;\r}\r execute      go to query-controller section\n /query/states Authorizarion: copy the token value from login output, without the quotes execute, you should see com.example.iou.IOU is now in the vault    3 Transfer the IOU Use alice's swagger to transfer IOU to bob.\n  go to security-controller section\n login method  username = user1, password = test   execute    go to query-controller section\n /query/states Authorizarion: copy the token value from login output, without the quotes execute, you should see com.example.iou.IOU in the output, copy the linearId.id value    go to main-controller section\n /api/transferiouinitiator  Authorizarion: copy the token value from login output, without the quotes Input  {\r\u0026#34;iouId\u0026#34;: {\r\u0026#34;externalId\u0026#34;: \u0026#34;iou1\u0026#34;,\r\u0026#34;id\u0026#34;: \u0026#34;paste the linearId.id value here\u0026#34;\r},\r\u0026#34;newHoder\u0026#34;: \u0026#34;O=bob,L=New York,C=US\u0026#34;\r}\r execute      go to query-controller section\n /query/states Authorizarion: copy the token value from login output, without the quotes execute, com.example.iou.IOU is no longer in the vault    4 Settle the IOU Use charlie's swagger UI to settle the IOU with cash\n go to main-controller section  /api/settleiouinitiator method  Authorizarion: copy the token value from login output, without the quotes Input:  {\r\u0026#34;iouId\u0026#34;: {\r\u0026#34;externalId\u0026#34;: \u0026#34;iou1\u0026#34;,\r\u0026#34;id\u0026#34;: \u0026#34;copy iou linearId.id value here\u0026#34;\r}\r}\r go to query-controller section  /query/states Authorizarion: copy the token value from login output, without the quotes execute, com.example.iou.IOU is no longer in the vault, and cash amount is reduced by $100      ","excerpt":"1 Issue cash Use bank's swagger UI to issue and transfer cash to charlie.\n  go to …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-test/test-cases/","title":"Run test cases"},{"body":"Dovetail Studio Requirements Docker Docker is needed to run Dovetail Studio, you can find the installation details here:\n Docker Docker Compose  Hyperledger Fabric Requirements Hyperledger Fabric SDK If you are developing for Hyperledger Fabric, below is a link to its installation instructions.\n Hyperledger Fabric  R3 Corda Requirements Java Programming Language and Tools If you are developing for R3 Corda you will need Java runtime.\n IMPORTANT: Java SE Development Kit 8 is required Maven  If you are developing for R3 Corda, following jars must be available in your local or public Maven Repository.\n \u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.jetbrains.kotlin\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;kotlin-stdlib-jre8\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.1.60\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;net.corda\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;corda-core\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;[2.0.0,)\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;net.corda\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;corda-finance\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;[2.0.0,)\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.tibco.dovetail\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;dovetail-corda\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;[0.2.0, )\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r Project Dovetail™ library for R3 Corda is available here, run following command to install it to your local Maven repository\n mkdir dovetail_corda\rcd dovetail_corda\rcurl -OL https://github.com/TIBCOSoftware/dovetail-contrib/releases/download/v0.2.0/dovetail-corda-0.2.0.jar\rmvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -DgeneratePom=true -DgroupId=com.tibco.dovetail -DartifactId=dovetail-corda -Dversion=0.2.0 -Dfile=dovetail_corda_v0.2.0.jar -Dpackaging=jar\r","excerpt":"Dovetail Studio Requirements Docker Docker is needed to run Dovetail Studio, you can find the …","ref":"https://tibcosoftware.github.io/dovetail/docs/getting-started/environment-prerequisites/","title":"Environment Prerequisites"},{"body":"  Go to IOU application Click on \u0026ldquo;Export app\u0026rdquo; button, save the file IOU.json to the artifacts folder inside iou_tutorial   The exported json file will be used to generate Corda Contract State and Contract, and it is also used to facilitate the implementation of CorDapp flows.\n","excerpt":"Go to IOU application Click on \u0026ldquo;Export app\u0026rdquo; button, save the file IOU.json to the …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/smart-contract/export/","title":"Export IOU Smart Contract Application"},{"body":"\n1. TransferIOU receiver flow  Create a flow  Create a flow flow name: TransferIOUResponder select trigger : Dovetail CorDApp Flow Receiver  select receiver from flow type dropdown select false for \u0026ldquo;Use confidential identities for this transaction?\u0026rdquo; initiator flow name: com.alice.iou.flows.TransferIOUInitiator click \u0026ldquo;Continue\u0026rdquo; button select \u0026ldquo;Copy Schema\u0026rdquo; select the trigger, and map flow input      2. SettleIOU receiver flow  Create a flow  Create a flow flow name: SettleIOUResponder select trigger : Dovetail CorDApp Flow Receiver  select receiver from flow type dropdown select false for \u0026ldquo;Use confidential identities for this transaction?\u0026rdquo; initiator flow name: com.charlie.iou.flows.SettleIOUInitiator click \u0026ldquo;Continue\u0026rdquo; button select \u0026ldquo;Copy Schema\u0026rdquo; select the trigger, and map flow input      3. Export the \u0026ldquo;bob\u0026rdquo; applicatio export the application to artifiacts/bob.json\n","excerpt":"1. TransferIOU receiver flow  Create a flow  Create a flow flow name: TransferIOUResponder select …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-dist/bob/","title":"CorDapp for bob"},{"body":"Dovetail CLI generates RPC client from CorDApp flows and Smart contract metadata, the generated client is a standalone springboot web server that exposes REST APIs to allow applications to invoke CorDapp flows.\nThe generated client also contains an embedded event streaming service to pulish vault state changes to specified messaging service, at present, only TIBCO Cloud Messaging is supported, use commandline \u0026ndash;streaming eftl to enable streaming service.\n1 Create dependency pom file copy following to artifacts/iou.pom file\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.example.iou\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;IOU\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r2. Generate Corda Client run following command from iou_tutorial folder, a web client is generated for charlie, alice and bob. The last command is to generate a generic web client than will be used for party \u0026lsquo;bank\u0026rsquo; to issue and transfer cash.\n2.1. charlie dovetail corda client generate --cordapp-json artifacts/charlie.json --smartcontract-json artifacts/IOU.json -v 1.0.0 -t artifacts/corda --cordapp-ns com.charlie.iou.flows --dependency-file artifacts/iou.pom --streaming none\r2.2. alice dovetail corda client generate --cordapp-json artifacts/alice.json --smartcontract-json artifacts/IOU.json -v 1.0.0 -t artifacts/corda --cordapp-ns com.alice.iou.flows --dependency-file artifacts/iou.pom --streaming none\r2.3. bob dovetail corda client generate --cordapp-json artifacts/bob.json --smartcontract-json artifacts/IOU.json -v 1.0.0 -t artifacts/corda --cordapp-ns com.bob.iou.flows --dependency-file artifacts/iou.pom --streaming none\r2.4. bank dovetail corda client generate -v 1.0.0 -t artifacts/corda\r","excerpt":"Dovetail CLI generates RPC client from CorDApp flows and Smart contract metadata, the generated …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-client/","title":"Generate Corda Client"},{"body":"Project Dovetail™ consists of the following sub-projects available as separate repos:\n dovetail: Documentation repository and release for dovetail studio UI dovetail-cli: Command line tools for building Dovetail apps \u0026amp; extensions dovetail-contrib: Dovetail contributions/extensions dovetail-java-lib: Dovetail java runtime for smart contract flows  ","excerpt":"Project Dovetail™ consists of the following sub-projects available as separate repos:\n dovetail: …","ref":"https://tibcosoftware.github.io/dovetail/docs/source-code/","title":"Dovetail Source Code Projects"},{"body":"  Maven should be installed on your system, and mvn is in your PATH Dovetail CLI should installed and in your PATH, it is also included in the cli folder in the corda.zip file (for mac only) Latest relese of dovetail-corda-x.x.x.jar should be installed to your local maven repo, it is also included in corda.zip, you can run cli/mvninstall.sh to install the jar file   Run following command from iou_tutorial directory, R3 Corda contract kotlin-IOUContract-1.0.0.jar is generated and written to artifacts/corda/iou folder, and installed in your local maven repository.\ncd iou_tutorial\rdovetail corda contract generate -m artifacts/IOU.json -v 1.0.0 -t artifacts/corda --namespace com.example.iou\r","excerpt":"Maven should be installed on your system, and mvn is in your PATH Dovetail CLI should installed and …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/smart-contract/generate/","title":"Generate Corda Artifacts"},{"body":"1. Export CorDapp flows   Export charlie application as charlie.json to artifacts/ folder Export alice application as alice.json to artifacts/ folder Export bob application as bob.json to artifacts/ folder   2. Generate CorDapp dependencies CorDapp responder flows have compile time and runtime dependency on their corresponding initiator flows, however since flows are private to each organization, Tibco Dovetail generates a base initator class without implementation details and can be shared with business partners.\nrun following command from iou_tutorial folder\n2.1 charlie dovetail corda dapp generate -m artifacts/charlie.json -v 1.0.0 -t artifacts/corda --namespace com.charlie.iou.flows --api\r2.2 alice dovetail corda dapp generate -m artifacts/alice.json -v 1.0.0 -t artifacts/corda --namespace com.alice.iou.flows --api\r3. Create dependency pom file for each organization 3.1 charlie copy following to artifacts/charlie.pom file\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.alice.iou.flows\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;alice-api\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r3.2 alice copy following to artifacts/alice.pom file\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.charlie.iou.flows\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;charlie-api\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r3.2 bob copy following to artifacts/bob.pom file\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.charlie.iou.flows\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;charlie-api\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.alice.iou.flows\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;alice-api\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r4. Generate CorDapps run following command from iou_tutorial folder\n4.1 charlie dovetail corda dapp generate -m artifacts/charlie.json -v 1.0.0 -t artifacts/corda --namespace com.charlie.iou.flows --dependency-file artifacts/charlie.pom\r4.2 alice dovetail corda dapp generate -m artifacts/alice.json -v 1.0.0 -t artifacts/corda --namespace com.alice.iou.flows --dependency-file alice.pom\r4.3 bob dovetail corda dapp generate -m artifacts/bob.json -v 1.0.0 -t artifacts/corda --namespace com.bob.iou.flows --dependency-file bob.pom\r","excerpt":"1. Export CorDapp flows   Export charlie application as charlie.json to artifacts/ folder Export …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-dist/cord-app-gen/","title":"Generate CorDapp artifacts"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/corda-test/","title":"Test on Corda"},{"body":"Corda IOU Smart Contract Tutorial In this tutorial, we will walk you through the steps to model and implement smart contracts and dapps for R3 Corda using Dovetail Studio, then we will use Dovetail CLI to generate runtime artifacts, and also generate RPC client with REST API interfaces for external integration, finally we will use Swagger UI to run some test cases.\nThe example is a simple \u0026ldquo;I owe you\u0026rdquo; use case, the issuer of an IOU is obligated to pay the owner of the IOU amount issued, the ownership of the IOU can be transferred by current owner, and all transactions will be recorded on the ledger.\nBefore getting started, you should have Project Dovetail™ Studio and Project Dovetail™ CLI installed, and your development environment setup.\nIf you have Tibco Cloud subscription or Enterprise Flogo studio, you can also upload Dovetail extentions to start smart contract and dapp development. the extensions are included in the corda.zip (see below) under artifacts/studio folder.\nFollow these steps to create the empty structure of the tutorial:\n  Create the tutorial initial structure    iou_tutorials  artifacts cli network  corda      mkdir -p iou_tutorial/artifacts\rmkdir -p iou_tutorial/cli\rmkdir -p iou_tutorial/network/corda\rCopy IOU network nodes and scripts corda.zip has pre-implemented and generated artifacts, nodes and scripts that will help you to get the corda network up and running.\ncurl -OL https://TIBCOSoftware.github.io/dovetail/tutorials/iou/corda.zip \u0026amp;\u0026amp; \\\runzip corda.zip \u0026amp;\u0026amp; \\\rrm corda.zip\r copy extracted network/corda/* to your network/corda folder copy extracted cli/* to your cli folder  ","excerpt":"Corda IOU Smart Contract Tutorial In this tutorial, we will walk you through the steps to model and …","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/corda-iou-tut/","title":"Corda IOU Smart Contract Tutorial"},{"body":"You can follow Hyperledger Fabric samples and tutorials in our Dovetail Contrib repository.\n","excerpt":"You can follow Hyperledger Fabric samples and tutorials in our Dovetail Contrib repository.","ref":"https://tibcosoftware.github.io/dovetail/docs/labs/fabic-sample/","title":"Fabric Samples and Tutorials"},{"body":"This section is where the user documentation for TIBCO LABS™ Project Dovetail™ lives - all the information you need to understand and successfully use this project assets.\n","excerpt":"This section is where the user documentation for TIBCO LABS™ Project Dovetail™ lives - all the …","ref":"https://tibcosoftware.github.io/dovetail/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/dovetail/blog/releases/","title":"New Releases"},{"body":"second public Implementation Release of the TIBCO LABS™ Project Dovetail™, containing new Features.\n please have a look back soon here.\n ","excerpt":"second public Implementation Release of the TIBCO LABS™ Project Dovetail™, containing new Features. …","ref":"https://tibcosoftware.github.io/dovetail/blog/2019/05/10/release-v.0.1.3/","title":"Release V.0.1.3"},{"body":"first public Implementation Release of the TIBCO LABS™ Project Dovetail™.\n please have a look back soon here.\n ","excerpt":"first public Implementation Release of the TIBCO LABS™ Project Dovetail™.\n please have a look back …","ref":"https://tibcosoftware.github.io/dovetail/blog/2018/11/30/initial-release/","title":"Initial Release"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/dovetail/index.json","title":""},{"body":" \r#td-cover-block-0 {\rbackground-image: url(/dovetail/about/featured-background_hud062541b21b90529446eee6001de80cd_8365555_960x540_fill_q75_catmullrom_bottom.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/dovetail/about/featured-background_hud062541b21b90529446eee6001de80cd_8365555_1920x1080_fill_q75_catmullrom_bottom.jpg); }\r}\r\rProject Dovetail™ by TIBCO LABS™\rWhat are Smart Contracts There are many definitions and descriptions of smart contracts, as each blockchain framework tends to implement this capability in its own way (if it does implement this feature at all). However, generally speaking, smart contracts (at least from an enterprise / permissioned perspective) may be thought of as application or business logic (defined in code) that runs within the context of a blockchain network itself. The idea is to automate the processing of blockchain transactions across the network, use the logic to determine if a transaction will get written to the ledger, and to maintain accuracy, compliance, and trust. In essence, smart contracts represent a method for controlling how changes are made to the underlying blockchain, in a non-centralized and (potentially) untrustworthy environment. Supply chain transaction tracking, healthcare revenue cycle management, consumer contract execution, and government interactions are all areas in which smart contracts (business logic) may be applied. Remember, however, that \"smart contracts\" are not necessarily \"smart\" (depends on the code) nor \"contracts\" (as they may not be viewed as legal contracts). Thus, the term can be a bit misleading :) \r\r\r\r\r\r\rMore Details about this Initiative here TIBCO LABS™ -Project Dovetail™ Wiki, on \r\r\r\r\rTIBCO LABS™ is a program designed to provide customers and partners with a mechanism for actively participating in TIBCO’s history of innovation. TIBCO has always been at the forefront of innovation, and TIBCO LABS™ allows participants to share in this history by collaboratively building solutions to today’s challenging problems, previewing new capabilities, and accessing emerging technologies in areas such as blockchain, AI / ML and IoT. Through TIBCO LABS™, customers and partners can gain insight into TIBCO’s innovation activities, participate in shaping the form of these activities in the years to come, and benefit from TIBCO’s leadership position in integration and analytics. \n    \n \r\r \rBSD 3-Clause License  Copyright © 2020 TIBCO Software Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n  Neither the name of TIBCO Software Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT OWNER AND CONTRIBUTORS \u0026ldquo;AS IS\u0026rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \r\r ","excerpt":"#td-cover-block-0 {\rbackground-image: …","ref":"https://tibcosoftware.github.io/dovetail/about/","title":"Project Dovetail™"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will …","ref":"https://tibcosoftware.github.io/dovetail/blog/","title":"Blog"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/dovetail/community/","title":"Community"},{"body":"\r\r#td-cover-block-0 {\rbackground-image: url(/dovetail/featured-background_hu9efd081837362e66a56325a5f337ec36_197062_960x540_fill_q75_catmullrom_top.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/dovetail/featured-background_hu9efd081837362e66a56325a5f337ec36_197062_1920x1080_fill_q75_catmullrom_top.jpg); }\r}\r\rProject Dovetail™\rLearn More \r\rSource \r\rMaking smart contracts smarter\n\n\r\r\r\r\r\r\r\rProject Project Dovetail™ by TIBCO LABS™\nDeveloping blockchain solutions with today’s technology is challenging given the lack of tooling and standardization. Project Dovetail™ by TIBCO LABS™ addresses these issues by providing a graphical interface for modeling smart contracts, making them easier to write, visualize, test, and audit, all without deep programming experience.\n\r\r\r\rLogic is abstracted from low-level code, and contracts can be developed for different blockchain stacks with little or no code. On-chain and off-chain computation can become more seamless, time to market is improved, and the risk of technology lock-in is reduced. Project Dovetail makes your smart contracts smarter.\n\r\r\r\r\r\rGet Started\rLet’s start your Dovetail journey!\nRead more …\n\r\r\rLabs\rLabs provide you with guides, tutorials and code samples and will help you work through building and deploying Dovetail smart contracts.\nRead more …\n\r\r\rSource Code\rThe whole Project consists of the some sub-projects as separate repos.\nRead more …\n\r\n\r\r\r\r\r\r\rContact us!\rReach us for more details, or engage us today !\nRead more …\n\r\r\rContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n\r\r\rFollow us on Twitter!\rFor announcement of latest features etc\u0026hellip;\nRead more …\n\r\r\r\r","excerpt":"#td-cover-block-0 {\rbackground-image: …","ref":"https://tibcosoftware.github.io/dovetail/","title":"Project Dovetail™"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/dovetail/search/","title":"Search Results"}]